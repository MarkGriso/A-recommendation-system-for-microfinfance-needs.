import itertools
from datetime import datetime,date
import numpy as np
import pandas as pd
import pandas as pd
import numpy as np
#import plotly as py
from matplotlib import pyplot as plt
import seaborn as sns
import iplot as py
import folium
import plotly.express as px
from plotly.offline import iplot
from sklearn.feature_extraction.text import CountVectorizer
from tabulate import tabulate
from wordcloud import WordCloud

kiva_loans_df = pd.read_csv('kiva_loans.csv', nrows=678000, sep =',',  parse_dates = ['posted_time', 'disbursed_time', 'funded_time', 'date'])
print(kiva_loans_df.head)
# Import of World population dataset
world_pop_df = pd.read_csv('WorldPopulation.csv', index_col=False)

kiva_mpi_region_location = pd.read_csv('kiva_mpi_region_locations.csv')
print(kiva_mpi_region_location.head)

loan_theme_ids = pd.read_csv('loan_theme_ids.csv')
print(kiva_mpi_region_location.head)

loan_themes_by_region = pd.read_csv('loan_themes_by_region.csv')
print(loan_themes_by_region.head)


kiva_loans_df["date"] = pd.to_datetime(kiva_loans_df["date"], format = "%Y-%m-%d")
kiva_loans_df["just_date"] = kiva_loans_df["date"].dt.date
kiva_loans_df["year"] = kiva_loans_df.date.dt.year
kiva_loans_df["month"] = kiva_loans_df.date.dt.month_name()
kiva_loans_df["day_week"] = kiva_loans_df.date.dt.day_name()
kiva_loans_df["number_month"]=kiva_loans_df.date.dt.month
print(kiva_loans_df.head)

# GENERAL INFORMATION ABOUT THE DIFFERENT DATASETS

print('Information about kiva_loans \n',kiva_loans_df.info())
print('Information about region location \n',kiva_mpi_region_location.info())
print('Information about loan themes \n',loan_theme_ids.info())
print('Information about loan themes by region\n',loan_themes_by_region.info())


# START PLOTS
'''# Plot loans per country
first_graph = sns.countplot(y="country", data=kiva_loans_df,
              order=kiva_loans_df.country.value_counts().iloc[:20].index).set_title("Loans Kiva grouped for Country", fontsize = 20)
#to increase y ticks size
plt.yticks(size=20)
plt.xticks(size=15)
plt.ylabel('')
plt.show()'''
#The Philippines has by far the most number of Kiva loan requests.

'''
# NUMBER OF LOANS REQUEST WORLD MAP
countries_number_loans = kiva_loans_df.groupby('country').count()['loan_amount'].sort_values(ascending = False)
data = [dict(
        type='choropleth',
        locations= countries_number_loans.index,
        locationmode='country names',
        z=countries_number_loans.values,
        text=countries_number_loans.index,
        colorscale = [[0,'rgb(0, 128, 0)'],[1,'rgb(179, 217, 140)']],
        reversescale=True,
        marker=dict(line=dict(width=0.7)),
        colorbar=dict(autotick=False, tickprefix='', title='# Loans'),
)]
layout = dict(title = 'Number of Loans Requested by Country',
              font=dict(size=25),
        geo = dict(
            showframe = False,
            showcoastlines = True,
            projection = dict(type = 'Mercator')),
            margin = dict(t=100, b=30, l=10, r=10))
fig = dict(data=data, layout=layout)

iplot(fig, validate=False, filename='loans-total-map')

# TOTAL AMOUNT REQUESTED BY COUNTRY
countries_loan_amount = kiva_loans_df.groupby('country').sum()['loan_amount'].sort_values(ascending = False)
data = [dict(
        type='choropleth',
        locations= countries_loan_amount.index,
        locationmode='country names',
        z=countries_loan_amount.values,
        text=countries_loan_amount.index,
        colorscale = [[0,'rgb(0, 128, 0)'],[1,'rgb(179, 217, 140)']],
        reversescale=True,
        marker=dict(line=dict(width=0.7)),
        colorbar=dict(autotick=False, tickprefix='', title='Loan Amount'),
)]
layout = dict(title = 'Total Loan Amount Requested by Country',
              font=dict(size=25),
        geo = dict(
            showframe = False,
            showcoastlines = True,
            projection = dict(type = 'Mercator')),
            margin = dict(t=100, b=30, l=10, r=10))
fig = dict(data=data, layout=layout, size=20)

iplot(fig, validate=False, filename='loans-total-map')
'''
'''# CURRENCY PLOT
currency_loans = kiva_loans_df.groupby(["currency"]).id.count().reset_index().sort_values(by="id", ascending=False).iloc[:20]

plt.figure(figsize=(15,10))
chart =sns.barplot(data= currency_loans, x="currency", y="id")
plt.xticks()
for p in chart.patches:
    chart.annotate("%.0f" % p.get_height(), (p.get_x() + p.get_width() / 2., p.get_height()),
                 ha='center', va='center', fontsize=12, color='black', xytext=(0, 7),
                 textcoords='offset points')
plt.title("Loans gathered by currency", fontsize=25)
plt.ylabel("Number of loans", fontsize=15)
plt.xlabel("Currency", size=15)
plt.yticks(size=15)
plt.xticks(size=20)
plt.show()
'''



# POPULATION ADJUSTMENT

# Get loan_per_country data
kiva_loan_country_df = kiva_loans_df[['id', 'country']].groupby(['country'])['id'].agg(loan_total='sum', loan_count='count').reset_index()
print('Questo \n',kiva_loan_country_df)
#kiva_loan_country_df.columns = kiva_loan_country_df.columns.droplevel()
kiva_loan_country_df.columns = ['country', 'loan_amount', 'loan_count']

# Join world population data to kiva loan_per_country data
kiva_loan_country_df = kiva_loan_country_df.merge(world_pop_df[['Country', '2016']], left_on=['country'], right_on=['Country'])
kiva_loan_country_df.drop('Country', axis=1, inplace=True)

# Calculate values per million population
kiva_loan_country_df['loans_per_mil'] = kiva_loan_country_df['loan_count'] / (kiva_loan_country_df['2016'] / 1000000)
kiva_loan_country_df['loan_amount_per_mil'] = kiva_loan_country_df['loan_amount'] / (kiva_loan_country_df['2016'] / 1000000)

# Plot loans per million per country
with sns.color_palette(), sns.plotting_context("notebook", font_scale=1.2):
    plt.figure(figsize=(16,4))
    kiva_loan_country_df.sort_values('loans_per_mil', ascending=False, inplace=True)
    sns.barplot(kiva_loan_country_df.head(10).loans_per_mil, kiva_loan_country_df.head(10).country).set_title("Number of Loans per Country considering Population", fontsize=20)
    plt.ylabel('')
plt.yticks(size=20)
plt.show()

# Plot loan amount per million per country
with sns.color_palette(), sns.plotting_context("notebook", font_scale=1.2):
    plt.figure(figsize=(16,4))
    kiva_loan_country_df.sort_values('loan_amount_per_mil', ascending=False, inplace=True)
    sns.barplot(kiva_loan_country_df.head(10).loan_amount_per_mil, kiva_loan_country_df.head(10).country).set_title("Loan Amount per Country considering Population", fontsize=20)
    plt.ylabel('')
plt.yticks(size=20)
plt.show()

# GEOGRAPHICAL GRAPH WITH POP ADJUSTED (SAMOA NOT VISIBLE)
data = [dict(
        type='choropleth',
        locations= kiva_loan_country_df.country,
        locationmode='country names',
        z=kiva_loan_country_df.loan_amount_per_mil,
        text=kiva_loan_country_df.index,
        colorscale = [[0,'rgb(0, 128, 0)'],[1,'rgb(179, 217, 140)']],
        reversescale=True,
        marker=dict(line=dict(width=0.7)),
        colorbar=dict(autotick=False, tickprefix='', title='Loan Amount per Mil.'),
)]
layout = dict(title = 'Loan Amount requests considering Population ',
        font=dict(size=25),
        geo = dict(
            showframe = False,
            showcoastlines = True,
            projection = dict(type = 'Mercator')),
            margin = dict(t=100, b=30, l=10, r=10))
fig = dict(data=data, layout=layout, size=20)
iplot(fig, validate=False, filename='loans-total-map')

# Plot loans per sector
with sns.color_palette(), sns.plotting_context("notebook", font_scale=1.2):
    plt.figure(figsize=(16,5))
    sns.countplot(y="sector", data=kiva_loans_df,
              order=kiva_loans_df.sector.value_counts().iloc[:20].index).set_title("Distribution of Loans by Sector", fontsize=20)
    plt.ylabel('')
plt.yticks(size=20)
plt.show()

'''
# Truncate outliers
percentile_99 = np.percentile(kiva_loans_df.loan_amount.values, 99)
kiva_loans_df['loan_amount_trunc'] = kiva_loans_df['loan_amount'].copy()
kiva_loans_df.loc[kiva_loans_df['loan_amount_trunc'] > percentile_99, 'loan_amount_trunc'] = percentile_99
# Plot loan amount histogram
sns.distplot(kiva_loans_df.loan_amount_trunc.values, kde=False)
plt.title("Loan Amount Distribution", size=20)
plt.xlabel('Loan Amount', size=15)
plt.ylabel('Number of Loans', size=15)
plt.xticks(size=15)
plt.yticks(size=15)
plt.show()'''

'''
# Plot repayent term histogram
sns.distplot(kiva_loans_df.term_in_months.values, kde=False)
plt.title("Distribution of loans term", fontsize=20)
plt.xlabel('Loan Term', size=15)
plt.ylabel('Number of Loans', size=15)
plt.yticks(size=15)
plt.xticks(size=15)
plt.show()'''

'''# PIE CHART REPAYMENT
repayment=kiva_loans_df.groupby(["repayment_interval"]).date.count().reset_index()
repayment
plt.figure(figsize=(12,10))
plt.pie(repayment.date,labels=repayment.repayment_interval, autopct="%0.2f%%", textprops={'fontsize': 20})
plt.axis("equal")
plt.title("Distribution of repayment_interval variable".title(), fontsize=20)
plt.legend(fontsize=20)
plt.yticks(size=20)
plt.xticks(size=20)
plt.show()'''


# PIE CHART SEX
def parse_genders(borrower_genders):
    gender_list = borrower_genders.split(",")
    gender_list = list(set(gender_list))
    gender_list = [borrower_genders.strip() for borrower_genders in gender_list]
    if len(gender_list) == 2:
        if 'female' in gender_list and 'male' in gender_list:
            return "male and female"
        elif 'female' in gender_list:
            return "multiple female"
        elif 'male' in gender_list:
            return "multiple male"
    elif gender_list[0] == "female":
        return "single female"
    elif gender_list[0] == "male":
        return "single male"
    else:
        return "unknown"

# Plot loans by borrower gender
with sns.color_palette("pastel"):
    plt.figure(figsize=(12, 10))
    plt.title("Samoa gender partition", fontsize=25)
    kiva_loans_df1 = kiva_loans_df[kiva_loans_df.country == 'Samoa']
    kiva_loans_df1.borrower_genders[kiva_loans_df.borrower_genders.isnull()] = 'unknown'
    #print(tabulate(kiva_loans_df1))
    kiva_loans_df1['gender'] = kiva_loans_df1.borrower_genders.apply(parse_genders)
    kiva_loans_df1.gender.value_counts().plot.pie(labeldistance=5, autopct="%0.2f%%", explode=(0.3,0.3), textprops={'fontsize': 15})
    plt.ylabel('')
    plt.legend(fontsize=15)
    plt.yticks(size=20)
    plt.xticks(size=20)
    plt.show()


# THE USE OF BORROWERS MONEY

'''# Most SECTOR

sector_pie = kiva_loans_df.groupby("sector").country.count().reset_index().sort_values(by="country", ascending=False)
plt.figure(figsize=(10,8))
chart=sns.barplot(data = sector_pie, x="sector", y ="country")
plt.xticks(rotation=90)
plt.title("Sector Variable rank".title(), fontsize=20)
plt.xlabel("Sector", fontsize=15)
plt.ylabel("loans".title(), fontsize=15)
plt.yticks(size=20)
plt.xticks(size=20)
plt.show()'''


'''# Gender and sector with a new gender approach
# gender of the frequent borrowers.
kiva_loans_df['female_gender'] = kiva_loans_df['borrower_genders'].str.contains('female')
# create a gender column
kiva_loans_df.loc[kiva_loans_df['female_gender'] == True, 'gender'] = 'Female'
kiva_loans_df.loc[kiva_loans_df['female_gender'] == False, 'gender'] = 'Male'
# drop irrelevant columns
kiva_loans_df.drop(['borrower_genders', 'female_gender'], axis=1, inplace=True)
plt.figure(figsize=(15,8))
count = kiva_loans_df['gender'].value_counts()
sns.barplot(count.values,count.index,)
for i,v in enumerate (count.values):
    plt.text(0.8,i,v,color='k',fontsize=12)
plt.xlabel('Count', fontsize=12)
plt.ylabel('Gender',fontsize=12)
plt.title('gender of borrowers')
plt.show()

# Sector plot per gender
sns.countplot(y='sector',data=kiva_loans_df, hue='gender', order= kiva_loans_df['sector'].value_counts().index)
plt.title('Sector analyzed by gender', fontsize=20)
plt.yticks(size=20)
plt.xticks(size=20)
plt.xlabel('count',fontsize=15)
plt.ylabel('sector',fontsize=15)
plt.legend(bbox_to_anchor=(1,0.5), prop={'size': 20})
plt.show()
'''


'''
# Most frequent activity used for loan
plt.figure(figsize=(15,8))
count = kiva_loans_df['activity'].value_counts().head(10)
sns.barplot(count.values, count.index, )
for i, v in enumerate(count.values):
    plt.text(0.8,i,v,color='k',fontsize=20)
plt.xlabel('Count',fontsize=20)
plt.ylabel('activity', fontsize=20)
plt.yticks(size=20)
plt.xticks(size=20)
plt.title('Rank of activity variable', fontsize=20)
plt.show()
'''

'''
# SECTOR DIVIDED IN ACTIVITIES
plt.figure(figsize=(20,12))

plt.subplot(2,2,1)
food=kiva_loans_df[kiva_loans_df.sector=="Food"]
food_loans = food.groupby(["sector","activity"]).date.count().reset_index().sort_values(by="date", ascending=False).iloc[:10]
sns.barplot(y="activity", x='date', data=food_loans, palette='mako')
plt.title("Sector: Food".title(),fontsize= 15)
plt.yticks(size=14)
plt.xticks(size=14)
plt.xlabel("Number of loans", size=10)
plt.ylabel("activity".title(), size=10)


plt.subplot(2,2,2)
food=kiva_loans_df[kiva_loans_df.sector=="Agriculture"]
food_loans = food.groupby(["sector","activity"]).date.count().reset_index().sort_values(by="date", ascending=False).iloc[:10]
sns.barplot(y="activity", x='date', data=food_loans, palette='mako')
plt.title("Sector: Agriculture".title(),fontsize= 15)
plt.yticks(size=14)
plt.xticks(size=14)
plt.xlabel("Number of loans", size=10)


plt.subplot(2,1,2)
food=kiva_loans_df[kiva_loans_df.sector=="Retail"]
food_loans = food.groupby(["sector","activity"]).date.count().reset_index().sort_values(by="date", ascending=False).iloc[:10]
sns.barplot(y="activity", x='date', data=food_loans, palette='mako')
plt.title("Sector: Retail".title(), fontsize= 15)
plt.yticks(size=14)
plt.xticks(size=14)
plt.xlabel("Number of loans", size=10)
plt.ylabel("activity".title(), size=10)
plt.show()
'''
'''
# USE OF FOOD SECTOR
from wordcloud import WordCloud

food_sector = kiva_loans_df[kiva_loans_df.activity == 'Food']
names = food_sector["use"][~pd.isnull(kiva_loans_df["use"])]
#print(names)
wordcloud = WordCloud(max_font_size=90, width=1000, height=300).generate(' '.join(names))
plt.figure(figsize=(15,12))
plt.imshow(wordcloud)
plt.title("Uses of loans for Food Sector", fontsize=35)
plt.axis("off")
plt.show()

# USE OF AGRICULTURE SECTOR
Agriculture_sector = kiva_loans_df[kiva_loans_df.sector == 'Agriculture']
names = Agriculture_sector["use"][~pd.isnull(kiva_loans_df["use"])]
#print(names)
wordcloud = WordCloud(max_font_size=90, width=1000, height=300).generate(' '.join(names))
plt.figure(figsize=(15,12))
plt.imshow(wordcloud)
plt.title("Uses of loans for Agriculture Sector", fontsize=35)
plt.axis("off")
plt.show()

# USE OF RETAIL SECTOR
Retail_sector = kiva_loans_df[kiva_loans_df.sector == 'Retail']
names = Retail_sector["use"][~pd.isnull(kiva_loans_df["use"])]
#print(names)
wordcloud = WordCloud(max_font_size=90, width=1000, height=300).generate(' '.join(names))
plt.figure(figsize=(15,12))
plt.imshow(wordcloud)
plt.title("Uses of loans for Retail Sector", fontsize=35)
plt.axis("off")
plt.show()
'''

'''# APPROFONDIMENTO SULL'ACQUA E SUL PERSONAL USE
from wordcloud import WordCloud
from wordcloud import STOPWORDS

def color_func(word, font_size, position, orientation,random_state=None, **kwargs):
    return("hsl(0,100%%, %d%%)" % np.random.randint(5,55))

# Plot word clouds
plt.subplot(221).set_title("Sector: Health")
wc = WordCloud(background_color='white', stopwords=STOPWORDS,max_words=20).generate(" ".join(kiva_loans_df.loc[kiva_loans_df['sector'] == 'Health'].use.astype(str)))
plt.imshow(wc.recolor(color_func=color_func))
plt.axis('off')

plt.subplot(222).set_title("Sector: Food")
wc = WordCloud(background_color='white', stopwords=STOPWORDS,max_words=20).generate(" ".join(kiva_loans_df.loc[kiva_loans_df['sector'] == 'Food'].use.astype(str)))
plt.imshow(wc.recolor(color_func=color_func))
plt.axis('off')

plt.subplot(223).set_title("Sector: Agriculture")
wc = WordCloud(background_color='white', stopwords=STOPWORDS,max_words=20).generate(" ".join(kiva_loans_df.loc[kiva_loans_df['sector'] == 'Agriculture'].use.astype(str)))
plt.imshow(wc.recolor(color_func=color_func))
plt.axis('off')

plt.subplot(224).set_title("Sector: Personal Use")
wc = WordCloud(background_color='white', stopwords=STOPWORDS,max_words=20).generate(" ".join(kiva_loans_df.loc[kiva_loans_df['sector'] == 'Personal Use'].use.astype(str)))
plt.imshow(wc.recolor(color_func=color_func))
plt.axis('off')

plt.suptitle("Loan Use")
plt.tight_layout(pad=0.4, w_pad=0.0, h_pad=2.0, rect=[0, 0, 0.95, 0.95])
plt.figure(figsize=(16,20))
plt.show()'''

# PIE CHART SEX FOR THE GENDER ANALYSIS
def parse_genders(borrower_genders):
    gender_list = borrower_genders.split(",")
    gender_list = list(set(gender_list))
    gender_list = [borrower_genders.strip() for borrower_genders in gender_list]
    if len(gender_list) == 2:
        if 'female' in gender_list and 'male' in gender_list:
            return "both"
        elif 'female' in gender_list:
            return "multiple female"
        elif 'male' in gender_list:
            return "multiple male"
    elif gender_list[0] == "female":
        return "single female"
    elif gender_list[0] == "male":
        return "single male"
    else:
        return "unknown"


# Plot loans by borrower gender
plt.subplot(2,2,1).set_title("Samoa gender partition", fontsize=20)
with sns.color_palette("pastel"):
    #plt.figure(figsize=(12, 10))
    kiva_loans_df1 = kiva_loans_df[kiva_loans_df.country == 'Samoa']
    kiva_loans_df1.borrower_genders[kiva_loans_df.borrower_genders.isnull()] = 'unknown'
    #print(tabulate(kiva_loans_df1))
    kiva_loans_df1['gender'] = kiva_loans_df1.borrower_genders.apply(parse_genders)
    kiva_loans_df1.gender.value_counts().plot.pie(labeldistance=1, autopct="%0.2f%%", explode=(0.3,0.3), textprops={'fontsize': 14})
    plt.ylabel('')
    plt.legend(fontsize=15,loc='best', bbox_to_anchor=(0, 1))



plt.subplot(2,2,2).set_title("El Salvador gender partition", fontsize=20)
with sns.color_palette("pastel"):
    #plt.figure(figsize=(12, 10))
    kiva_loans_df1 = kiva_loans_df[kiva_loans_df.country == 'El Salvador']
    kiva_loans_df1.borrower_genders[kiva_loans_df.borrower_genders.isnull()] = 'unknown'
    #print(tabulate(kiva_loans_df1))
    kiva_loans_df1['gender'] = kiva_loans_df1.borrower_genders.apply(parse_genders)
    kiva_loans_df1.gender.value_counts().plot.pie(labeldistance=1,explode=(0.1,0.1,0.1,0.1,0.1), autopct="%0.2f%%",textprops={'fontsize': 14})
    plt.ylabel('')
    plt.legend(fontsize=15, loc='best', bbox_to_anchor=(0, 1))
 



plt.subplot(2,2,3).set_title("Liberia gender partition", fontsize=20)
with sns.color_palette("pastel"):
    #plt.figure(figsize=(12, 10))
    kiva_loans_df1 = kiva_loans_df[kiva_loans_df.country == 'Liberia']
    kiva_loans_df1.borrower_genders[kiva_loans_df.borrower_genders.isnull()] = 'unknown'
    #print(tabulate(kiva_loans_df1))
    kiva_loans_df1['gender'] = kiva_loans_df1.borrower_genders.apply(parse_genders)
    kiva_loans_df1.gender.value_counts().plot.pie(labeldistance=1, autopct="%0.2f%%", textprops={'fontsize': 14})
    plt.ylabel('')
    plt.legend(fontsize=15)


plt.suptitle("Gender Partition top countries", fontsize=25)
plt.tight_layout(pad=0.4, w_pad=0.0, h_pad=0.0, rect=[2, 2, 2, 2])
plt.figure(figsize=(15,15))
plt.show()


# TENTATIVI TIME SERIES
# Indicizzazione iniziali necessarie per tutti i plot successivi
lcst = kiva_loans_df.loc[:,['loan_amount', 'country','sector', 'just_date']]
lcst.set_index('just_date', inplace=True)

# Overall loan amount evolution
'''
plt.figure(figsize=(12,6))
monthly = lcst.resample('M').sum()/1000000
month_label=[]
for dt in monthly.index:
    month_label.append(dt.strftime('%Y-%m'))
sns.lineplot(x=month_label, y=monthly['loan_amount'], color='green', alpha=0.7)
plt.title('Loan Amount by Month', fontsize=18)
plt.xticks(rotation=90, fontsize=15)
plt.yticks(fontsize=15)
plt.ylabel('Loan Amount million usd', fontsize=15)
plt.show()
'''

# FUNZIONE CHE RESTITUISCE LO STORICO DELL'AMMONTARE DEI PRESTITI PER PAESE SELEZIONATO IN FONDO
'''plt.figure(figsize=(12, 6))
def plot_monthly_by_cty(cty_name):
    lctm_cty = lcst[lcst.country == cty_name].resample('M').sum()
    month_label = []
    for dt in lctm_cty.index:
        month_label.append(dt.strftime('%Y-%m'))
    sns.lineplot(x=month_label, y=lctm_cty['loan_amount'], color='green', alpha=0.7)
    plt.title('Loan Amount time series - ' + cty_name, fontsize=20)
    plt.xticks(rotation=45, fontsize=13)
    plt.ylabel('Amount of loan in USD', fontsize=13)
    #plt.show()
plt.subplot(2, 1, 1)
plot_monthly_by_cty('Samoa')
plt.subplot(2, 1, 2)
plot_monthly_by_cty('El Salvador')
plt.show()
# PLOT PER SETTORE RICHIESTO GENERICO
plt.figure(figsize=(12, 6))

# SERIE STORICA PER SETTORE
def plot_monthly_by_sector(sec_name):
    lsm_sec = lcst[lcst.sector == sec_name].resample('M').sum()
    month_label = []
    for dt in lsm_sec.index:
        month_label.append(dt.strftime('%Y/%m'))
    sns.barplot(x=month_label, y=lsm_sec['loan_amount'], color='green', alpha=0.7)
    plt.title('Sector trend for ' + sec_name, fontsize=20)
    plt.ylabel('Amount of the loan', fontsize=15)
    plt.xticks(rotation=45, fontsize=13)
    plt.show()

plt.subplot(2, 1, 1)
plot_monthly_by_sector('Agriculture')

plt.subplot(2, 1, 2)
plot_monthly_by_sector('Food')
plt.show()
'''

'''
# TIME SERIES DECOMPOSITION
from statsmodels.tsa.seasonal import seasonal_decompose
lcst_agri = lcst[lcst['sector']=='Agriculture'].reset_index()
lcst_agri['just_date'] = pd.to_datetime(lcst_agri.just_date, format='%Y-%m-%d')
#lcst_agri['just_date'] = lcst_agri['just_date'].dt.strftime('%Y-%m-%d')
agri23 = lcst_agri['loan_amount'].groupby(lcst_agri.just_date.dt.to_period("M")).agg(loan_amout = 'sum')
#agri_right_grouping = lcst_agri.groupby(lcst_agri.just_date.dt.month)['loan_amount']
#lcst_agri.to_csv('Time_series_agriculture')

# riga necessaria per la riconversione dell'indice in tempo richiesto
agri23.index = agri23.index.to_timestamp()
result=seasonal_decompose(agri23, model='additive', period=12)
result.plot()
plt.title('Series and time decomposition for Agriculture', fontsize=18)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.show()

# seasonal decompose per food
lcst_food = lcst[lcst['sector']=='Food'].reset_index()
lcst_food['just_date'] = pd.to_datetime(lcst_food.just_date, format='%Y-%m-%d')
food23 = lcst_food['loan_amount'].groupby(lcst_food.just_date.dt.to_period("M")).agg(loan_amout = 'sum')
#lcst_agri.to_csv('Time_series_Food')

# riga necessaria per la riconversione dell'indice in tempo richiesto
food23.index = food23.index.to_timestamp()
result=seasonal_decompose(food23, model='additive', period=12)
result.plot()
plt.title('Series and time decomposition for Food', fontsize=18)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.show()



'''
#####################################
# ANALISI SULL'UTILIZZO
#####################################
'''
kiva_use = pd.DataFrame(kiva_loans_df['use'].value_counts(sort='loan_amount'))
kiva_use.reset_index(inplace=True)
kiva_use.columns = ['use', 'total_amount']

plt.figure(figsize=(15, 10))

barplot = sns.barplot(x=kiva_use['total_amount'][:20], y=kiva_use['use'][:20])
barplot.set(xlabel='', ylabel='')
plt.title('Top usages of loans:', fontsize=20)
plt.xticks(fontsize=17)
plt.yticks(fontsize=17)
plt.show()





# PRESTITI MENO USATI
unique_uses = kiva_use[kiva_use['total_amount']==1]
#pdtoplot = unique_uses[49:59]

plt.figure(figsize=(15, 10))
barplot = sns.barplot(x=unique_uses['total_amount'][11:25], y=unique_uses['use'][11:25])
barplot.set(xlabel='', ylabel='')
plt.title('Some examples of unique loans:', fontsize=20)
plt.xticks(fontsize=17)
plt.yticks(fontsize=17)
plt.show()'''
'''
# WARCLUD PER L'USO GENERALE
kiva_loans_df['use_simplified'] = kiva_loans_df['use'].copy()

kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('clean water').fillna(False), 'use_simplified'] = 'clean water'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('water filter').fillna(False), 'use_simplified'] = 'clean water'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('water filtration').fillna(False), 'use_simplified'] = 'clean water'

kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('toilet').fillna(False), 'use_simplified'] = 'sanitary toilet'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('latrine').fillna(False), 'use_simplified'] = 'sanitary toilet'

kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('university').fillna(False), 'use_simplified'] = 'school'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('school').fillna(False), 'use_simplified'] = 'school'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('tuition').fillna(False), 'use_simplified'] = 'school'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('studies').fillna(False), 'use_simplified'] = 'school'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('study').fillna(False), 'use_simplified'] = 'school'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('college').fillna(False), 'use_simplified'] = 'school'

kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('supplies to raise').fillna(False), 'use_simplified'] = 'farm supplies'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('feed and vitamins').fillna(False), 'use_simplified'] = 'farm supplies'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('feeds and vitamins').fillna(False), 'use_simplified'] = 'farm supplies'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('fertilizer').fillna(False), 'use_simplified'] = 'farm supplies'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('farm').fillna(False), 'use_simplified'] = 'farm supplies'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('maize').fillna(False), 'use_simplified'] = 'farm supplies'

kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains(' to sell').fillna(False), 'use_simplified'] = 'merchandice to sell'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains(' for resale').fillna(False), 'use_simplified'] = 'merchandice to sell'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains(' more stock').fillna(False), 'use_simplified'] = 'merchandice to sell'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains(' restock').fillna(False), 'use_simplified'] = 'merchandice to sell'

kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('food production business').fillna(False), 'use_simplified'] = 'food production business'

kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('solar lamp').fillna(False), 'use_simplified'] = 'solar lamp'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('solar lantern').fillna(False), 'use_simplified'] = 'solar lamp'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('solar light').fillna(False), 'use_simplified'] = 'solar lamp'

kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('building materials').fillna(False), 'use_simplified'] = 'building materials'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('construction materials').fillna(False), 'use_simplified'] = 'building materials'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('cement').fillna(False), 'use_simplified'] = 'building materials'

kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains(' fish ').fillna(False), 'use_simplified'] = 'fish'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains(' seafood ').fillna(False), 'use_simplified'] = 'fish'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains(' fishing ').fillna(False), 'use_simplified'] = 'fish'

kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('stove').fillna(False), 'use_simplified'] = 'stove'

kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('cattle').fillna(False), 'use_simplified'] = 'livestock'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('calves').fillna(False), 'use_simplified'] = 'livestock'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('cow').fillna(False), 'use_simplified'] = 'livestock'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('poultry').fillna(False), 'use_simplified'] = 'livestock'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('pig').fillna(False), 'use_simplified'] = 'livestock'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('goat').fillna(False), 'use_simplified'] = 'livestock'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('chicken').fillna(False), 'use_simplified'] = 'livestock'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('livestock').fillna(False), 'use_simplified'] = 'livestock'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('buffalo').fillna(False), 'use_simplified'] = 'livestock'

kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('items to sell').fillna(False), 'use_simplified'] = 'items to sell'

kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('clothes').fillna(False), 'use_simplified'] = 'clothes'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('clothing').fillna(False), 'use_simplified'] = 'clothes'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('tailor').fillna(False), 'use_simplified'] = 'clothes'
kiva_loans_df.loc[kiva_loans_df['use_simplified'].str.contains('sewing').fillna(False), 'use_simplified'] = 'clothes'

print("Using simple regular expression to simplify the use variable. After simplification the number of unique values is",
      kiva_loans_df['use_simplified'].nunique(), "which is down from", kiva_loans_df['use'].nunique(),"in the original dataset")

from wordcloud import STOPWORDS
def color_func(word, font_size, position, orientation,random_state=None, **kwargs):
    return("hsl(0,100%%, %d%%)" % np.random.randint(5,55))

wordcloud = WordCloud(background_color='white', width = 1400, height = 600, random_state=42, colormap='summer')
plt.imshow(wordcloud.fit_words(kiva_loans_df['use_simplified'].value_counts().head(100)))
plt.axis('off')
plt.title('Most used words', fontsize=20)
plt.imshow(wordcloud.recolor(color_func=color_func))
plt.show()


### STESSO LAVORO PER I PRESTITI MENO USATI
unique_uses['use_simplified'] = unique_uses['use'].copy()



unique_uses.loc[unique_uses['use_simplified'].str.contains('clean water').fillna(False), 'use_simplified'] = 'clean water'
unique_uses.loc[unique_uses['use_simplified'].str.contains('water filter').fillna(False), 'use_simplified'] = 'clean water'
unique_uses.loc[unique_uses['use_simplified'].str.contains('water filtration').fillna(False), 'use_simplified'] = 'clean water'

unique_uses.loc[unique_uses['use_simplified'].str.contains('toilet').fillna(False), 'use_simplified'] = 'sanitary toilet'
unique_uses.loc[unique_uses['use_simplified'].str.contains('latrine').fillna(False), 'use_simplified'] = 'sanitary toilet'

unique_uses.loc[unique_uses['use_simplified'].str.contains('university').fillna(False), 'use_simplified'] = 'school'
unique_uses.loc[unique_uses['use_simplified'].str.contains('school').fillna(False), 'use_simplified'] = 'school'
unique_uses.loc[unique_uses['use_simplified'].str.contains('tuition').fillna(False), 'use_simplified'] = 'school'
unique_uses.loc[unique_uses['use_simplified'].str.contains('studies').fillna(False), 'use_simplified'] = 'school'
unique_uses.loc[unique_uses['use_simplified'].str.contains('study').fillna(False), 'use_simplified'] = 'school'
unique_uses.loc[unique_uses['use_simplified'].str.contains('college').fillna(False), 'use_simplified'] = 'school'

unique_uses.loc[unique_uses['use_simplified'].str.contains('supplies to raise').fillna(False), 'use_simplified'] = 'farm supplies'
unique_uses.loc[unique_uses['use_simplified'].str.contains('feed and vitamins').fillna(False), 'use_simplified'] = 'farm supplies'
unique_uses.loc[unique_uses['use_simplified'].str.contains('feeds and vitamins').fillna(False), 'use_simplified'] = 'farm supplies'
unique_uses.loc[unique_uses['use_simplified'].str.contains('fertilizer').fillna(False), 'use_simplified'] = 'farm supplies'
unique_uses.loc[unique_uses['use_simplified'].str.contains('farm').fillna(False), 'use_simplified'] = 'farm supplies'
unique_uses.loc[unique_uses['use_simplified'].str.contains('maize').fillna(False), 'use_simplified'] = 'farm supplies'

unique_uses.loc[unique_uses['use_simplified'].str.contains(' to sell').fillna(False), 'use_simplified'] = 'merchandice to sell'
unique_uses.loc[unique_uses['use_simplified'].str.contains(' for resale').fillna(False), 'use_simplified'] = 'merchandice to sell'
unique_uses.loc[unique_uses['use_simplified'].str.contains(' more stock').fillna(False), 'use_simplified'] = 'merchandice to sell'
unique_uses.loc[unique_uses['use_simplified'].str.contains(' restock').fillna(False), 'use_simplified'] = 'merchandice to sell'

unique_uses.loc[unique_uses['use_simplified'].str.contains('food production business').fillna(False), 'use_simplified'] = 'food production business'

unique_uses.loc[unique_uses['use_simplified'].str.contains('solar lamp').fillna(False), 'use_simplified'] = 'solar lamp'
unique_uses.loc[unique_uses['use_simplified'].str.contains('solar lantern').fillna(False), 'use_simplified'] = 'solar lamp'
unique_uses.loc[unique_uses['use_simplified'].str.contains('solar light').fillna(False), 'use_simplified'] = 'solar lamp'

unique_uses.loc[unique_uses['use_simplified'].str.contains('building materials').fillna(False), 'use_simplified'] = 'building materials'
unique_uses.loc[unique_uses['use_simplified'].str.contains('construction materials').fillna(False), 'use_simplified'] = 'building materials'
unique_uses.loc[unique_uses['use_simplified'].str.contains('cement').fillna(False), 'use_simplified'] = 'building materials'

unique_uses.loc[unique_uses['use_simplified'].str.contains(' fish ').fillna(False), 'use_simplified'] = 'fish'
unique_uses.loc[unique_uses['use_simplified'].str.contains(' seafood ').fillna(False), 'use_simplified'] = 'fish'
unique_uses.loc[unique_uses['use_simplified'].str.contains(' fishing ').fillna(False), 'use_simplified'] = 'fish'

unique_uses.loc[unique_uses['use_simplified'].str.contains('stove').fillna(False), 'use_simplified'] = 'stove'

unique_uses.loc[unique_uses['use_simplified'].str.contains('cattle').fillna(False), 'use_simplified'] = 'livestock'
unique_uses.loc[unique_uses['use_simplified'].str.contains('calves').fillna(False), 'use_simplified'] = 'livestock'
unique_uses.loc[unique_uses['use_simplified'].str.contains('cow').fillna(False), 'use_simplified'] = 'livestock'
unique_uses.loc[unique_uses['use_simplified'].str.contains('poultry').fillna(False), 'use_simplified'] = 'livestock'
unique_uses.loc[unique_uses['use_simplified'].str.contains('pig').fillna(False), 'use_simplified'] = 'livestock'
unique_uses.loc[unique_uses['use_simplified'].str.contains('goat').fillna(False), 'use_simplified'] = 'livestock'
unique_uses.loc[unique_uses['use_simplified'].str.contains('chicken').fillna(False), 'use_simplified'] = 'livestock'
unique_uses.loc[unique_uses['use_simplified'].str.contains('livestock').fillna(False), 'use_simplified'] = 'livestock'
unique_uses.loc[unique_uses['use_simplified'].str.contains('buffalo').fillna(False), 'use_simplified'] = 'livestock'

unique_uses.loc[unique_uses['use_simplified'].str.contains('items to sell').fillna(False), 'use_simplified'] = 'items to sell'

unique_uses.loc[unique_uses['use_simplified'].str.contains('clothes').fillna(False), 'use_simplified'] = 'clothes'
unique_uses.loc[unique_uses['use_simplified'].str.contains('clothing').fillna(False), 'use_simplified'] = 'clothes'
unique_uses.loc[unique_uses['use_simplified'].str.contains('tailor').fillna(False), 'use_simplified'] = 'clothes'
unique_uses.loc[unique_uses['use_simplified'].str.contains('sewing').fillna(False), 'use_simplified'] = 'clothes'


wordcloud = WordCloud(background_color='white', width = 1400, height = 600, random_state=42, colormap='summer')
plt.imshow(wordcloud.fit_words(unique_uses['use_simplified'].value_counts().head(100)))
plt.axis('off')
plt.title('Word cloud of unique uses', fontsize=20)
plt.imshow(wordcloud.recolor(color_func=color_func))
plt.show()
'''
